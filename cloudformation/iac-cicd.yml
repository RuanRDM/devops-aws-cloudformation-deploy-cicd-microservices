AWSTemplateFormatVersion: 2010-09-09
Description: Template CloudFormation para criação dos recursos necessário para pipeline de Integração e Entrega Contínua.

Parameters:
  Stage:
    Type: String
    Default: dev
  ContainerPort:
    Type: Number
    Default: 3000

Resources:
  ################## Deploy Infraestrutura CICD #################

  # Criação de Repositório ECR para armazenar imagens Docker
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', ['ecr-repository' ,!Ref Stage]]

  # Criação de Bucket S3 para armazenamento das informações de build do CodeBuild
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', ['bucket-artifacts', !Ref Stage,]]

  # Criação da Access Role para o CodePipeLine
  CodePipeLineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['CodePipelineExecutionRole', !Ref Stage,]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Criação da Access Role para o CodeBuild
  CodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['CodeBuildExecutionRole', !Ref Stage,]]
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # Criação da Access Role para o Cloudformation
  CloudformationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['CloudFormationExecutionRole', !Ref Stage,]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Criação de repositório git CodeCommit
  CodeCommitRepository:
    Type: "AWS::CodeCommit::Repository"
    Properties:
      RepositoryName: devops-iac-microservice-frontend
      RepositoryDescription: Repositório utilizado para implementação de microsserviços utilizando CICD.

  # Criação de projeto CodeBuild
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "ECRRepository" ] ] ] ]
      Name: !Join ['-', ['build-project', !Ref Stage, 'ecs']]
      ServiceRole: !Ref CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
  
  # Criação do CodePipeline com os 3 Stages (Source, Build and Deploy)
  CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: S3Bucket
    Properties: 
      ArtifactStore: 
        Location: !Join ['-', ['bucket-artifacts', !Ref Stage,]]
        Type: S3
      Name: !Join ['-', ['pipeline', !Ref Stage, 'ecs']]
      RestartExecutionOnUpdate: False
      RoleArn: 
        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]
        
      Stages:
        - Name: Source
          Actions: 
          - Name: Source
            ActionTypeId: 
              Category: Source
              Owner: AWS
              Provider: CodeCommit
              Version: 1
            Configuration:
              RepositoryName: devops-iac-microservice-frontend
              BranchName: dev
            RunOrder: 1
            OutputArtifacts:
              - Name: source-output-artifacts
        
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts:
              - Name: build-output-artifacts
            InputArtifacts:
              - Name: source-output-artifacts
            Configuration:
                ProjectName: !Ref BuildProject
            RunOrder: 1

        - Name: Deploy
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: source-output-artifacts
              - Name: build-output-artifacts
            Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imagedefinitions.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${ContainerPort}"
                  }
                RoleArn: 
                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
                StackName: devops-aws-iac-microservices
                TemplatePath: source-output-artifacts::cloudformation/iac-microservices.yml
            RunOrder: 1

  
  
  